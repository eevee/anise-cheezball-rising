include "inc/types/entity.rgbasm"
include "inc/math.rgbasm"


SECTION "High locals: entity", HRAM
; TODO need to find a way to reuse these
h_loop_counter1:
    db
h_loop_counter2:
    db
h_facing:
    db


SECTION "Entity data", WRAM0
entity_count::
    db
entities::
    ; TODO should i round this up to a power of two?
    ;ds sizeof_Entity * MAX_ENTITIES
anise::
    ds sizeof_Entity
cheezball::
    ds sizeof_Entity * (MAX_ENTITIES)
; A list of entity pointers, sorted by their y coordinates.  Used
; for building the OAM buffer.
entities_sorted_y::
    ds MAX_ENTITIES * 2


; TODO does this live here??
SECTION "OAM Buffer", WRAM0[$C100]
oam_buffer::
    ds 4 * 40


SECTION "Entity kinds", ROM0
; 00 -- The player!
ENTITY_KIND_ANISE::
    db 0        ; flags
; TODO remove me, sigh
ANISE_RADIUS::
    db 4 << 4   ; radius
    ; sprite config
    db 3        ; number of sprites
    ; antenna
    db 0        ; tile
    db 0        ; props
    db -2, -20  ; down offset
    db -7, -20  ; up offset
    db -4, -20  ; right offset
    db -4, -20  ; left offset
    ; left part
    db 2
    db %00000001
    db -8, -14
    db -8, -14
    db -8, -14
    db -8, -14
    ; right part
    db 4
    db %00000001
    db 0, -14
    db 0, -14
    db 0, -14
    db 0, -14
; 01 -- Cheezball
ENTITY_KIND_CHEEZBALL::
    db 0
; TODO remove me
CHEEZBALL_RADIUS::
    db 4 << 4
    ; sprite config
    db 3
    ; antenna
    db 6
    db %00000011
    db -3, -17
    db -3, -17
    db -3, -17
    db -3, -17
    ; left
    db 8
    db %00000010
    db -8, -14
    db -8, -14
    db -8, -14
    db -8, -14
    ; right
    db 10
    db %00000010
    db 0, -14
    db 0, -14
    db 0, -14
    db 0, -14


; List of pointers to all entities in order, for quick lookup
ENTITY_KINDS::
    dw ENTITY_KIND_ANISE            ; 00
    dw ENTITY_KIND_CHEEZBALL        ; 01


SECTION "Entity code", ROM0

; Spawn an entity of type 'a' at position bc, de.
; Returns the entity id in 'a' and a pointer to it in hl.
; DEV NOTE: This code is EXTREMELY sensitive to the order of the
; Entity struct.
spawn_entity::
    ; Stash type
    push af

    ; TODO this obviously does not actually work yet; it should
    ; find an empty slot, maybe have a way to return an error if
    ; there isn't one, etc.  or maybe some entities are
    ; low-priority (e.g. effects) and can be nuked?
    ld hl, entity_count
    ld a, [hl]
    inc [hl]

    ld hl, entities
    push af
    StrideLiteralIntoHL sizeof_Entity
    pop af

    ; Append the new entity pointer to the sorted list
    push de
    ld de, entities_sorted_y
    add a, a
    AddATo16 de
    ld a, l
    ld [de], a
    inc de
    ld a, h
    ld [de], a
    pop de

    ; Restore type
    pop af

    ; hl = new entity
    push hl                     ; to restore once we're done
    ; Type
    ld [hl+], a
    ; Position
    ld [hl], b
    inc hl
    ld [hl], c
    inc hl
    ld [hl], d
    inc hl
    ld [hl], e
    inc hl
    ; Velocity
    xor a
    ld [hl+], a
    ld [hl+], a
    ld [hl+], a
    ld [hl+], a
    ; Facing
    ld a, FACING_DOWN
    ld [hl+], a
    ; Pose
    xor a  ; idle, for now, i guess
    ld [hl+], a
    ; Frame
    ld [hl+], a
    ; Countdown
    ld a, ANIMATION_LENGTH
    ld [hl+], a

    pop hl
    ret


; Updates the sorted entity lists.  Should be called at the end
; of any frame where any entity moved.
sort_entities::
    ld a, [entity_count]
    ; Zero or one entities are trivially sorted
    cp a, 2
    ret c

    ; Insertion sort!
    ; b <- index of the entity pointer being inserted
    ld b, 1
    ; hl <- address of pointer #0
    ld hl, entities_sorted_y
.outer_loop:
    ; Bump hl to match b
    inc hl
    inc hl
    push hl
    ; de <- address of candidate's y coordinate
    ld e, [hl]
    inc hl
    ld d, [hl]
    dec hl
    push de
    ld a, Entity_y
    AddATo16 de
    ; c <- position to insert
    ld c, b
    ; Search backwards for the right position
.inner_loop:
    ; hl <- address of pointer #(c - 1)
    push hl
    dec hl
    dec hl
    ld a, [hl+]
    ld h, [hl]
    ld l, a
    ld a, Entity_y
    AddATo16 hl

    ; if A[j - 1]->y <= y
    ;     break
    ld a, [de]
    cp a, [hl]
    jr c, .break_inner_loop
    jr nz, .continue_with_swap
    inc de
    inc hl
    ld a, [de]
    cp a, [hl]
    jr c, .break_inner_loop
    jr z, .break_inner_loop

.continue_with_swap:
    pop hl

    ; Copy pointer #(c - 1) into slot #c
    dec hl
    dec hl
    ld a, [hl+]
    inc hl
    ld [hl-], a
    ld a, [hl+]
    inc hl
    ld [hl], a
    dec hl

    ; j ← j - 1
    dec c
    dec hl
    dec hl

    ; if j <= 0
    ;     break
    jr nz, .inner_loop

    ; FIXME this superfluous push vexes me
    push hl
.break_inner_loop:
    pop hl
    ; A[j] ← x
    pop de
    ld [hl], e
    inc hl
    ld [hl], d

    ; i ← i + 1
    inc b
    ld a, b
    ld hl, entity_count
    cp a, [hl]
    pop hl
    jr nz, .outer_loop

    ret


; Updates OAM!
; Trashes everything.
update_oam::
    ; de <- oam buffer slot
    ld de, oam_buffer

    ; Read the number of entities
    ld hl, entity_count
    ld a, [hl]
    or a, a
    jr z, .skip_loop_entity
    ldh [h_loop_counter1], a

    ld hl, entities_sorted_y

.loop_entity:
    ; Read the next entity address into hl
    ld a, [hl+]
    ld b, a
    ld a, [hl+]
    push hl
    ld h, a
    ld l, b

    push de

    ; e <- entity kind index * 2
    ld a, [hl]
    add a, a
    ld e, a
    ; bc <- x and y screen coords
    call get_entity_screen_position

    ; a <- facing
    ld a, Entity_facing - (Entity_y + 2)
    AddATo16 hl
    ld a, [hl]
    ldh [h_facing], a

    ; hl <- entity kind sprite offsets
    ld hl, ENTITY_KINDS
    Add8To16 hl, e
    ; TODO macro for loading hl into itself?
    ld a, [hl+]
    ld h, [hl]
    ld l, a
    ld a, EntityKind_sprites
    AddATo16 hl

    pop de

    ; Read the sprite count
    ; NOTE: Must always be at least 1!  (FIXME?)
    ld a, [hl+]
    ldh [h_loop_counter2], a

.loop_sprite:
    ; Populate the buffer
    ; 2: chr index
    ld a, [hl+]
    inc de
    inc de
    ld [de], a
    ; 3: attributes
    ld a, [hl+]
    inc de
    ld [de], a
    ; Take facing into account
    ldh a, [h_facing]
    add a, a
    AddATo16 hl
    ; 1: x-coord
    ld a, [hl+]
    add a, b
    add a, 8
    dec de
    dec de
    ld [de], a
    ; 0: y-coord
    ld a, [hl+]
    add a, c
    add a, 16
    dec de
    ld [de], a

    ; Move de to the next OAM slot
    inc de
    inc de
    inc de
    inc de

    ; Skip to the beginning of the next sprite
    ; TODO don't need to do this on the last iteration
    ldh a, [h_facing]
    ; a <- 3 - a
    cpl
    and a, %11
    add a, a
    AddATo16 hl

    ; Loop to the next sprite
    ldh a, [h_loop_counter2]
    dec a
    ldh [h_loop_counter2], a
    jr nz, .loop_sprite

    pop hl

    ; Loop to the next entity
    ldh a, [h_loop_counter1]
    dec a
    ldh [h_loop_counter1], a
    jr nz, .loop_entity

.skip_loop_entity:

    ; TODO clear the rest of the buffer

    ret

; Given an entity pointed to by hl, put its x and y screen
; coordinates in bc.
; Trashes a.  Bumps hl to point to the field after y.
get_entity_screen_position::
    inc hl                      ; x field
    ; TODO should of course subtract the camera offset and
    ; whatnot

    ; Load x coordinate into b, with 12.4 -> 8 conversion
    ; aaaabbbb ccccdddd => bbbbcccc
    ld a, [hl+]                 ; a = aaaabbbb
    swap a                      ; a = bbbbaaaa
    and a, $f0                  ; a = bbbb0000
    ld b, a                     ; b = bbbb0000
    ld a, [hl+]                 ; a = ccccdddd
    swap a                      ; a = ddddcccc
    and a, $0f                  ; a = 0000cccc
    or a, b                     ; a = bbbbcccc
    ld b, a                     ; b = bbbbcccc

    ; Load y coordinate into c
    ld a, [hl+]
    swap a
    and a, $f0
    ld c, a
    ld a, [hl+]
    swap a
    and a, $0f
    or a, c
    ld c, a

    ret
