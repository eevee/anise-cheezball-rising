; Various math macros, for ease of reading math-heavy code.

; Add an 8-bit register to a 16-bit register, in place.
; No clever tricks, just the six ops you'd expect.
; Trashes 'a'.  DO NOT use with 'a'.
; ex: Add8To16 bc, [hl]
Add8To16: MACRO
    ld a, LOW(\1)
    add a, \2
    ld LOW(\1), a
    ld a, HIGH(\1)
    adc a, 0
    ld HIGH(\1), a
ENDM

; Add 'a' to a 16-bit register.
; ex: AddATo16 hl
AddATo16: MACRO
    add a, LOW(\1)
    ld LOW(\1), a
    jr nc, .no_carry\@
    inc HIGH(\1)
.no_carry\@:
ENDM

; Subtract an 8-bit register from a 16-bit register, in place.
; No clever tricks, just the six ops you'd expect.
; Trashes 'a'.  DO NOT use with 'a'.
; ex: Sub8From16 bc, d
Sub8From16: MACRO
    ld a, LOW(\1)
    sub a, \2
    ld LOW(\1), a
    ld a, HIGH(\1)
    sbc a, 0
    ld HIGH(\1), a
ENDM

; Subtract 'a' from a 16-bit register.
; ex: SubAFrom16 de
SubAFrom16: MACRO
    ; Compute a - LOW instead, and invert the result
    sub a, LOW(\1)
    cpl
    inc a
    ld LOW(\1), a
    ; Borrow from HIGH only if a > LOW
    jr c, .no_borrow\@
    jr z, .no_borrow\@
    dec HIGH(\1)
.no_borrow\@:
    ; TODO should i deal with flags here...?  caller could
    ; probably figure out over/underflow themselves if
    ; desired...
ENDM

; Compare two 16-bit registers.  Sets the c and z flags.
; Trashes 'a'.
Compare16: MACRO
    ld a, HIGH(\1)
    cp a, HIGH(\2)
    jr nz, .not_equal_high\@
    ld a, LOW(\1)
    cp a, LOW(\2)
.not_equal_high\@:
ENDM
