; Various math macros, for ease of reading math-heavy code.

; TODO maybe write out the sizes and costs of these

; Negates a 16-bit register.
; Trashes 'a'.
; ex: Negate16 de
; 10 bytes, 10 M-cycles
Negate16: MACRO
    xor a
    sub a, LOW(\1)
    ld LOW(\1), a
    sbc a, a
    sub a, HIGH(\1)
    ld HIGH(\1), a
ENDM

; Add an 8-bit register to a 16-bit register, in place.
; No clever tricks, just the six ops you'd expect.
; Trashes 'a'.  DO NOT use with 'a'.
; ex: Add8To16 bc, [hl]
; 12 bytes, 12 M-cycles
Add8To16: MACRO
    ld a, \2
    AddATo16 \1
ENDM

; Add 'a' to a 16-bit register.
; ex: AddATo16 hl
; 10 bytes, 10 M-cycles
AddATo16: MACRO
    add a, LOW(\1)
    ld LOW(\1), a
    adc a, HIGH(\1)
    sub LOW(\1)
    ld HIGH(\1), a
ENDM

; Subtract an 8-bit register from a 16-bit register, in place.
; No clever tricks, just the six ops you'd expect.
; Trashes 'a'.  DO NOT use with 'a'.
; ex: Sub8From16 bc, d
; 11 bytes, 11 M-cycles
Sub8From16: MACRO
    ld a, LOW(\1)
    sub a, \2
    ld LOW(\1), a
    sbc a, a
    add a, HIGH(\1)
    ld HIGH(\1), a
ENDM

; Subtract 'a' from a 16-bit register.
; ex: SubAFrom16 de
; 11 bytes, 11 M-cycles
SubAFrom16: MACRO
    cpl
    scf
    adc a, LOW(\1)
    ld LOW(\1), a
    adc a, HIGH(\1)
    dec a
    ld HIGH(\1), a
ENDM

; Compare two 16-bit registers.  Sets the c and z flags.
; Trashes 'a'.
; 10 bytes, 7/10 M-cycles
Compare16: MACRO
    ld a, HIGH(\1)
    cp a, HIGH(\2)
    jr nz, .not_equal_high\@
    ld a, LOW(\1)
    cp a, LOW(\2)
.not_equal_high\@:
ENDM

; Multiply a by some literal and add the result to hl.
; TODO this could probably use some variants.  for example, if
; the literal fits in 8 bits, could this be faster?
StrideLiteralIntoHL: MACRO
    or a, a
    jr z, .skip_stride\@
    ; TODO is this push always necessary?  urgh
    push bc
    ld bc, \1
.stride\@:
    add hl, bc
    dec a
    jr nz, .stride\@
    pop bc
.skip_stride\@:
ENDM
