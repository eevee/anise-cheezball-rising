include "inc/hardware.inc"

; Constants
FACING_DOWN   EQU 0
FACING_UP     EQU 1
FACING_RIGHT  EQU 2
FACING_LEFT   EQU 3

ANIMATION_LENGTH EQU 5

dcolor: MACRO  ; COLOR($rrggbb) -> gbc representation
_r = ((\1) & $ff0000) >> 16 >> 3
_g = ((\1) & $00ff00) >> 8  >> 3
_b = ((\1) & $0000ff) >> 0  >> 3
    dw (_r << 0) | (_g << 5) | (_b << 10)
    ENDM


; Reset vectors
SECTION "rst $00", ROM0[$0000]
    ret
SECTION "rst $08", ROM0[$0008]
    ret
SECTION "rst $10", ROM0[$0010]
    ret
SECTION "rst $18", ROM0[$0018]
    ret
SECTION "rst $20", ROM0[$0020]
    ret
SECTION "rst $28", ROM0[$0028]
    ret
SECTION "rst $30", ROM0[$0030]
    ret
SECTION "rst $38", ROM0[$0038]
    ; NOTE: This is encoded as $ff, so it's a great place to put
    ; a crash handler
    ret

; Interrupt addresses
SECTION "Vblank interrupt", ROM0[$0040]
    push hl
    ld hl, vblank_flag
    ld [hl], 1
    pop hl
    reti

SECTION "LCD controller status interrupt", ROM0[$0048]
    ; I think this happens when the screen is updating and hits a user-specified row, so this is where you'd do stuff like wavy screen effects
    reti

SECTION "Timer overflow interrupt", ROM0[$0050]
    reti

SECTION "Serial transfer completion interrupt", ROM0[$0058]
    reti

SECTION "P10-P13 signal low edge interrupt", ROM0[$0060]
    ; ???
    reti

DisableLCD: MACRO
    ld a, [rLCDC]
    and a, $ff & ~LCDCF_ON
    ld [rLCDC], a
ENDM

EnableLCD: MACRO
    ld a, [rLCDC]
    or a, LCDCF_ON
    ld [rLCDC], a
ENDM

; Control starts here, but there's more ROM header several bytes later, so the
; only thing we can really do is immediately jump to after the header
SECTION "init", ROM0[$0100]
    nop
    jp start

SECTION "whatever", ROM0
dma_copy:
    ld a, $c1
    ldh [rDMA], a               ; begin transfer
    ld a, 40                    ; wait for 160 cycles
.loop:
    dec a
    jr nz, .loop
    ret
dma_copy_end:
    nop

; Initialization and whatnot
SECTION "main", ROM0[$0150]
; DMA copy routine, not used directly but copied into high RAM at startup
start:
    ; Enable interrupts
    ld a, IEF_VBLANK
    ldh [rIE], a
    ; This instruction enables whichever interrupts are enabled according to FFFF
    ei

    ; Set LCD palette for grayscale mode; yes, it has a palette
    ld a, %01100100
    ld [rBGP], a

    ; LCD controller
    ; Note that the LCD is turned off here; it's re-enabled at
    ; the end of all this loading code
    call wait_for_vblank
    ld a, LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
    ldh [rLCDC], a

    ; Set a color palette.  Those aren't exposed directly in main RAM; instead,
    ; you have to write to a register, which will then write the palette to...
    ; somewhere.  Also, colors are two bytes (RGB555), but the register is only
    ; one byte, which complicates things a bit more.
    ; Luckily, if we set the high bit of the control register to 1, it
    ; auto-increments every time we write to the write register, meaning...
    ; well, it looks like this.
    ld a, %10000000
    ld [rBCPS], a

    ld hl, TEST_PALETTES
    REPT 8
    ld a, [hl+]
    ld [rBCPD], a
    ENDR

    ; Load some basic tiles
    ld hl, $9000
    ld de, TEST_TILES
    ld bc, 1600
    call copy16

    ; Read from the test map
    ; TODO good candidate for DMA...?  or maybe not since i should really only be filling the visible screen area
    ld hl, $9800
    ld de, TEST_MAP_1
    ld bc, 1024
    call copy16

    ; Same thing but for an object palette
    ld a, %10000000
    ldh [rOCPS], a
    ld hl, ANISE_TEST_PALETTES
    REPT 16
    ld a, [hl+]
    ldh [rOCPD], a
    ENDR

    ; Define an object
    ld a, HIGH(ANISE_TEST_TILES)
    ld [anise_sprites_address], a
    ld a, LOW(ANISE_TEST_TILES)
    ld [anise_sprites_address + 1], a

    ld a, 64
    ld [anise_x], a
    ld [anise_y], a
    ld a, FACING_DOWN
    ld [anise_facing], a
    ld a, ANIMATION_LENGTH
    ld [anise_frame_countdown], a

    ; Put an object on the screen, maybe.  Probably not.

    ; ANTENNA
    ld b, 64
    ld c, 64
    ld hl, oam_buffer
    ; y-coord
    ld a, c
    sub a, 6
    ld [hl+], a
    ; x-coord
    ld a, b
    add a, 6
    ld [hl+], a
    ; chr index
    ld a, 0
    ld [hl+], a
    ; attributes
    ld a, %00000000
    ld [hl+], a

    ; LEFT PART
    ; y-coord
    ld a, c
    ld [hl+], a
    ; x-coord
    ld a, b
    ld [hl+], a
    ; chr index
    ld a, 2
    ld [hl+], a
    ; attributes
    ld a, %00000001
    ld [hl+], a

    ; RIGHT PART
    ; y-coord
    ld a, c
    ld [hl+], a
    ; x-coord
    ld a, b
    add a, 8
    ld [hl+], a
    ; chr index
    ld a, 4
    ld [hl+], a
    ; attributes
    ld a, %00000001
    ld [hl+], a

    ; DMA something
    ld de, dma_copy
    ld hl, $FF80
    ld c, dma_copy_end - dma_copy
    call copy

    EnableLCD

main:
    ; Main loop: wait for a vblank, then do stuff
    call wait_for_vblank

    ; GRAPHICS STUFF -- MUST HAPPEN ASAP, AND FAST!
    ; Only have about a thousand cycles to do everything you
    ; need with VRAM, and that's assuming music doesn't eat into
    ; that time!

    ; Use DMA to copy our OAM buffer into real OAM
    call $FF80

    ; Update Anise's current sprite.  Use DMA here because...
    ; well, geez, it's too slow otherwise.
    ; TODO that doesn't really bode well in general for me
    ; TODO there should perhaps just be a list of current tiles
    ; that need updating, and to what?  hey how does zelda deal
    ; with animated tiles, I wonder
    ; TODO ergh, wait, this scheme means that there'll be a
    ; single frame that you're moving in a direction before the
    ; sprite actually changes to match.  fuckin hell
    ld hl, anise_sprites_address
    ld a, [hl+]
    ld [rHDMA1], a
    ld a, [hl]
    ld [rHDMA2], a
    ld a, HIGH($0000)
    ld [rHDMA3], a
    ld a, LOW($0000)
    ld [rHDMA4], a
    ld a, (32 * 3) / 16 - 1
    ld [rHDMA5], a

    ; END GRAPHICS STUFF

    call read_input

    ld a, [buttons_pressed]
    bit PADB_A, a
    jp nz, .do_show_dialogue

    ; OK, uh, so, what do i need here
    ; 0. SPRITE
    ; 1. POSE
    ; 2. ANGLE
    ; 3. FRAME
    ; sprites all begin at ANISE_TEST_TILES
    ; a pose is really a list of frames
    ; so, anise data should include:
    ; 
;ANISE_SPRITES EQU ANISE_TEST_TILES
ANISE_SPRITE_COUNT EQU 4
ANISE_SPRITE_PARTS EQU 3
ANISE_SPRITE_UNIQUE EQU 1
ANISE_SPRITE_ANGLED EQU 1

; update facing
; handle movement [OK]
; decide pose
; update portrait

    ; Anise update loop
    ld a, [buttons]
    ; b/c: dx/dy
    ld b, 0
    ld c, 0
    bit PADB_LEFT, a
    jr z, .skip_left
    dec b
.skip_left:
    bit PADB_RIGHT, a
    jr z, .skip_right
    inc b
.skip_right:
    bit PADB_UP, a
    jr z, .skip_up
    dec c
.skip_up:
    bit PADB_DOWN, a
    jr z, .skip_down
    inc c
.skip_down:

    ; Update sprite positions, hackily
    ; x
    ld de, 4
    ld hl, oam_buffer + 1
    ld a, [anise_x]
    add a, b
    ld [anise_x], a
    ld a, [hl]
    add a, b
    ld [hl], a
    add hl, de
    ld a, [hl]
    add a, b
    ld [hl], a
    add hl, de
    ld a, [hl]
    add a, b
    ld [hl], a
    ; y
    ld de, 4
    ld hl, oam_buffer
    ld a, [anise_y]
    add a, c
    ld [anise_x], a
    ld a, [hl]
    add a, c
    ld [hl], a
    add hl, de
    ld a, [hl]
    add a, c
    ld [hl], a
    add hl, de
    ld a, [hl]
    add a, c
    ld [hl], a

    ; Set d to dx|dy, which is nonzero iff we moved
    ld a, b
    or a, c
    ld d, a

    ; Figure out which way we're facing, based on which (if any) button is newly-pressed this frame
    ; TODO hey i could just keep shifting and...  wait is there any point to that, maybe it's faster?
    ld hl, anise_facing
    ld a, [buttons_pressed]
    bit PADB_LEFT, a
    jr z, .skip_left2
    ld [hl], FACING_LEFT
    jr .skip_down2
.skip_left2:
    bit PADB_RIGHT, a
    jr z, .skip_right2
    ld [hl], FACING_RIGHT
    jr .skip_down2
.skip_right2:
    bit PADB_UP, a
    jr z, .skip_up2
    ld [hl], FACING_UP
    jr .skip_down2
.skip_up2:
    bit PADB_DOWN, a
    jr z, .skip_down2
    ld [hl], FACING_DOWN
.skip_down2:

    ld a, d
    cp a, 0
    jp z, .no_movement

    ld a, [anise_frame_countdown]
    dec a
    ld [anise_frame_countdown], a
    jp nz, .no_movement
    ; TODO i jump when it hits zero, so will this skip a frame, or no because this is one of the frames
    ld a, ANIMATION_LENGTH
    ld [anise_frame_countdown], a
    
    ; Anise has a unique sprite, so overwrite the current tile rather than
    ; changing tiles
    ld hl, ANISE_TEST_TILES

    ; Skip ahead a number of /rows/ of tiles, corresponding to anise's facing
    ld a, [anise_facing]
    and a, %11                      ; cap to 4, just in case
    ; TODO unhardcode frame count (oof)
    ld bc, 4 * 3 * 2 * 16           ; frames * parts * tiles * bytes per tile
.skip_facing_row:
    cp a, 0
    jr z, .done_skip_facing_row
    add hl, bc
    dec a
    jr .skip_facing_row
.done_skip_facing_row:

    ; Note that this part always needs to happen!!  I'm just doing it here to
    ; avoid loading anise_frame again in the next bit
    ; TODO need to reset the frame when direction changes (and when pose changes)
    ld a, [anise_frame]
    inc a
    and a, 4 - 1
    ld [anise_frame], a

    ; Skip ahead 3 sprites * the current frame
    ld bc, 3 * 2 * 16               ; parts * tiles * bytes per tile
    and a, a
.advance_frame:    
    jr z, .done_advancing_frame
    add hl, bc
    dec a
    jr .advance_frame
.done_advancing_frame:
    ; Store the new sprite address, to be updated during vblank
    ld a, h
    ld [anise_sprites_address], a
    ld a, l
    ld [anise_sprites_address + 1], a

.no_movement:
    ; Loop again when done
    jp main

; Other blocking actions
.do_show_dialogue:
    call show_dialogue
    jp main


; populates buttons, buttons_released, buttons_pressed
; NOTE: trashes a, b, hl
read_input:
    ; Populating the request bits is asynchronous, and we need a
    ; slight delay to get a reliable read, which is most easily
    ; done by just reading several times.  This comes from the
    ; manual so it oughta be correct
    ld a, $20                   ; read dpad
    ldh [rP1], a
    ld a, [rP1]
    ld a, [rP1]
    cpl                         ; zero bits indicate presses!
    and a, $0f                  ; mask off just the dpad bits
    ld b, a                     ; store dpad bits in b

    ld a, $10                   ; read buttons
    ldh [rP1], a
    ld a, [rP1]                 ; even more unreliable!
    ld a, [rP1]
    ld a, [rP1]
    ld a, [rP1]
    ld a, [rP1]
    ld a, [rP1]
    cpl
    and a, $0f
    swap b                      ; put dpad in the high nybble
                                ; (matches GBA bit order)
    or a, b                     ; combine with dpad

    ; a now contains the current buttons
    ld hl, buttons
    ld b, [hl]                  ; b <- previous buttons
    ld [hl], a                  ; a -> current buttons
    cpl
    and a, b
    ld [buttons_released], a    ; a = ~new & old, i.e. released
    ld a, [hl]                  ; a <- current buttons
    cpl
    or a, b
    cpl
    ld [buttons_pressed], a     ; a = ~(~new | old), i.e. pressed
    ret

SECTION "Utility code", ROM0
; idle until next vblank
wait_for_vblank:
    xor a                       ; clear the vblank flag
    ld [vblank_flag], a
.vblank_loop:
    halt                        ; wait for interrupt
    ld a, [vblank_flag]         ; was it a vblank interrupt?
    and a
    jr z, .vblank_loop          ; if not, keep waiting
    ret

; TODO these could be sped up somewhat by partial unrolling
; copy c bytes from de to hl
; NOTE: c = 0 means to copy 256 bytes!
copy:
    ld a, [de]
    inc de
    ld [hl+], a
    dec c
    jr nz, copy
    ret

; copy bc bytes from de to hl
; NOTE: bc must not be zero
copy16:
    ld a, [de]
    inc de
    ld [hl+], a
    dec bc
    ; TODO dec bc doesn't set flags??  arrghghh
    xor a
    or b
    jr nz, copy16
    or c
    jr nz, copy16
    ret

; fill c bytes starting at hl with a
; NOTE: c must not be zero
fill:
    ld [hl+], a
    dec c
    jr nz, fill
    ret



SECTION "Actor data", ROM0
ANISE_ACTOR_INFO:
    dw ANISE_TEST_TILES
    ; Idle pose
    db 0, 1
    ; Walk pose
    db 0, 4


SECTION "Important twiddles", WRAM0[$C000]
vblank_flag:
    db
buttons:
    db
buttons_pressed:
    db
buttons_released:
    db
anise_x:
    db
anise_y:
    db
anise_facing:
    db
anise_pose:
    db
anise_obj:
    db
anise_frame:
    db
anise_frame_countdown:
    db
anise_sprites_address:
    dw

SECTION "OAM Buffer", WRAM0[$C100]
oam_buffer:
    ds 4 * 40

include "tilesets/testmap.rgbasm"
include "tilesets/testanise.rgbasm"

SECTION "Font", ROMX
text:
    db "The quick brown fox jumps over the     lazy dog's back.  AOOWWRRR!!!!", 0
    db "Jackdaws love my big sphinx of quartz.", 0
; FONT
font: include "font.inc"

SECTION "Text buffer", WRAM0[$C200]
text_buffer:
    ; Text is up to 8x16 but may span two columns, so carve out
    ; enough space for four tiles
    ds $40
text_x:
    ; x offset within the current tile at which to render
    db
text_y:
    db

SECTION "Text rendering", ROM0
PALETTE_TEXT:
    dcolor $000000
    dcolor $ffffff
    dcolor $999999
    dcolor $666666

SCREEN_WIDTH_TILES EQU 20
CANVAS_WIDTH_TILES EQU 32
SCREEN_HEIGHT_TILES EQU 18
CANVAS_HEIGHT_TILES EQU 32
BYTES_PER_TILE EQU 16
TEXT_START_TILE_1 EQU 128
TEXT_START_TILE_2 EQU TEXT_START_TILE_1 + SCREEN_WIDTH_TILES * 2

show_dialogue:
    ; SETUP
    ; Slide up the dialogue window (by showing one row of black
    ; at a time, starting at the bottom)

    ; Use four vblanks
    call wait_for_vblank

    ; Set up palette during this first vblank, too
    ld a, %10111000
    ld [rBCPS], a
    ld hl, PALETTE_TEXT
    REPT 8
    ld a, [hl+]
    ld [rBCPD], a
    ENDR

    ; Blank out tile 255
    ld a, 1
    ldh [rVBK], a
    xor a
    ld c, BYTES_PER_TILE
    ld hl, $8800 + 255 * BYTES_PER_TILE
    call fill

    ; Row 4
    ld hl, $9800 + CANVAS_WIDTH_TILES * (SCREEN_HEIGHT_TILES - 1)
    ld b, TEXT_START_TILE_2 + 1
    call fill_tilemap_row

    ; Row 3
    call wait_for_vblank
    ld hl, $9800 + CANVAS_WIDTH_TILES * (SCREEN_HEIGHT_TILES - 2)
    ld b, TEXT_START_TILE_2
    call fill_tilemap_row

    ; Row 2
    call wait_for_vblank
    ld hl, $9800 + CANVAS_WIDTH_TILES * (SCREEN_HEIGHT_TILES - 3)
    ld b, TEXT_START_TILE_1 + 1
    call fill_tilemap_row

    ; Row 1
    call wait_for_vblank
    ld hl, $9800 + CANVAS_WIDTH_TILES * (SCREEN_HEIGHT_TILES - 4)
    ld b, TEXT_START_TILE_1
    call fill_tilemap_row

    ; Zero out the tile buffer
    xor a
    ld hl, text_buffer
    ld c, $40
    call fill

    ; ----------------------------------------------------------
    ; Setup done!  Real work begins here
    ; de: text cursor + current character tiles
    ; hl: current VRAM tile being drawn into + buffer pointer
    ld a, 4
    ld [text_y], a
    ld b, 4
    ld de, text
    ld hl, $8800

    ; The basic problem here is to shift a byte and split it
    ; across two other bytes, like so:
    ;      yyyyy YYY
    ;   xxx00000 00000000
    ;           ↓
    ;   xxxyyyyy YYY00000
    ; To do this, we rotate the byte, mask the low bits, OR them
    ; with the first byte, restore it, mask the high bits, and
    ; then store that directly as the second byte (which should
    ; be all zeroes anyway).
.next_letter:
    ld a, [de]                  ; get current character
    and a                       ; if NUL, we're done!
    jp z, .done
    inc de                      ; otherwise, increment

    ; Get the font character
    push de                     ; from here, de is tiles
    ; Alas, I can only add to hl, so I need to compute the font
    ; character address in hl and /then/ put it in de.  But I
    ; already pushed de, so I can use that as scratch space.
    push hl
    sub a, 32   ; TODO temporary...?
    ld hl, font
    ld de, 33                   ; 1 width byte + 16 * 2 tiles
    ; TODO can we speed striding up with long mult?
    and a
.letter_stride:
    jr z, .skip_letter_stride
    add hl, de
    dec a
    jr .letter_stride
.skip_letter_stride:
    ld d, h                     ; move char tile addr to de
    ld e, l

    ld a, [de]                  ; read width
    inc de

    ; Copy into current tiles
    push af                     ; stash width
    ld c, 32                    ; 32 bytes per row
    ld hl, text_buffer
; FIXME: doesn't work, we write beyond the end of the text
; buffer
;    ; Skip ahead y rows
;    ld a, [text_y]
;    or a
;    jr z, .skip_adjust_y
;    push bc
;    ld bc, 4
;.adjust_y:
;    add hl, bc
;    dec a
;    jr nz, .adjust_y
;    pop bc
;.skip_adjust_y:
    inc b   ; FIXME? this makes the loop simpler since i only test after the dec, but it also is the 1px kerning between characters...
.row_copy:
    ld a, [de]                  ; read next row of character
    ; Rotate right by b - 1 pixels
    push bc                     ; preserve b while shifting
    ld c, $ff                   ; create a mask
    dec b
    jr z, .skip_rotate
.rotate:
    rrca
    srl c
    dec b
    jr nz, .rotate
.skip_rotate:
    push af
    and a, c                    ; mask right pixels
    ; Draw to left half of text buffer
    or a, [hl]                  ; OR with current tile
    ld [hl+], a
    ; Write the remaining bits to right half
    ld a, c                     ; put mask in a...
    cpl                         ; ...to invert it
    ld c, a                     ; then put it back
    pop af                      ; restore unmasked pixels
    and a, c                    ; mask left pixels
    ld [hl+], a                 ; and store them!
    ; Loop and cleanup
    inc de                      ; next row of character
    pop bc                      ; restore counter!
    dec c
    jr nz, .row_copy
    pop af                      ; restore width

    ; Draw the buffered tiles to vram
    ; The text buffer is treated like it's 16 pixels wide, but
    ; VRAM is of course only 8 pixels wide, so we need to do
    ; this in two iterations: the left two tiles, then the right
    ; TODO explain this with a fucking diagram because i feel
    ; like i'm wrong about it anyway
    pop hl                      ; restore hl (VRAM)
    push af                     ; stash width, again
    call wait_for_vblank        ; always wait before drawing
    push bc
    push de
    ; Draw the left two tiles
    ld c, $20
    ld de, text_buffer
.draw_left:
    ld a, [de]
    inc de
    inc de
    ld [hl+], a
    dec c
    jr nz, .draw_left
    ; Draw the right two tiles
    ld c, $20
    ld de, text_buffer + 1
.draw_right:
    ld a, [de]
    inc de
    inc de
    ld [hl+], a
    dec c
    jr nz, .draw_right
    pop de
    pop bc
    pop af                      ; restore width, again

    ; Increment the pixel offset and deal with overflow
    ; TODO it's possible we're at 9 pixels wide, thanks to the
    ; kerning pixel, uh oh.  but that pixel would be empty,
    ; right?  wait, no, it comes /before/...  well fuck
    ; TODO actually that might make something weird happen due
    ; to the inc b above, maybe...?
    dec b
    add a, b                    ; a <- new x offset
    ld bc, -32                  ; move the VRAM pointer back...
    add hl, bc                  ; ...to the start of the tile
    cp a, 8
    jr nc, .wrap_to_next_tile
    ; The new offset is less than 8, so this character didn't
    ; draw into the next tile.  Move the VRAM pointer back
    ; another two tiles, to the column we started in
    add hl, bc
    jr .done_wrap
.wrap_to_next_tile:
    ; The new offset is 8 or more, so this character drew into
    ; the next tile.  Subtract 8, but also shift the text buffer
    ; by copying all the "right" tiles over the "left" tiles
    sub a, 8                    ; a >= 8: subtract tile width
    push hl
    push af
    ld hl, text_buffer + $40 - 1
    ld c, $20
.shift_buffer:
    ld a, [hl-]
    ld [hl-], a
    dec c
    jr nz, .shift_buffer
    pop af
    pop hl
.done_wrap:
    ld b, a                     ; either way, store into b

    ; Loop
    pop de                      ; pop text pointer
    jp .next_letter

.done:
    EnableLCD  ; TODO get rid of me with a buffer
    ; Remember to reset bank to 0!
    xor a
    ldh [rVBK], a
    ret


; Fill a row in the tilemap in a way that's helpful to dialogue.
; TODO document better.
; TODO this should, you know, probably use the window or be
; configurable or sssomething
; hl: where to start filling
; b: tile to start with
fill_tilemap_row:
    ; Populate bank 0, the tile proper
    xor a
    ldh [rVBK], a

    ld c, SCREEN_WIDTH_TILES
    ld a, b
.loop0:
    ld [hl+], a
    add a, 2
    dec c
    jr nz, .loop0

    ; Populate bank 1, the bank and palette
    ld a, 1
    ldh [rVBK], a
    ld a, %00001111  ; bank 1, palette 7
    ld c, SCREEN_WIDTH_TILES
    dec hl
.loop1:
    ld [hl-], a
    dec c
    jr nz, .loop1

    ret
